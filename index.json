{"project": "geocat-comp", "project_url": "https://github.com/NCAR/geocat-comp", "show_commit_url": "#", "hash_length": 8, "revision_to_hash": {"598": "66dac79399d513420cc9dfc9d4fec82610a351ee", "810": "9e686759c7eaa93fb37657960c8b68f89a97e304", "941": "b99f066ef6cfb702bb9fd1341bb72efff9324a71", "1060": "db7697baad1703129c32ec82972cce4c49f2154f", "1065": "eae0d27f353db2bfae9ae36ad2b615fdca66cf44", "1097": "9227bdd8c6e788f02918be4045a2eca6127c28d4", "1167": "8cdc1b976017f623eb9a4fb17735d0ffa9f9d515", "1192": "19ba399eca0f84eabdc6842dddec83589611861f", "1204": "f88c65daf43e7bf3e75bd0d0eea20322e8ad618b", "1235": "944bd824571f3d185d9644bdc49cdec6f800e050", "1280": "3a1df2b6c006eebbe0c91b4b5e7366a2b25b52fd", "1320": "0f22e64a4a4e1fcd2409a7d05dcc2bba366c6076", "1439": "506d533c8b6159c57f4d498f3eda4e8985d69deb", "1476": "c9b8ccab2488e0b0d8bc70cb95e58089cb584349", "1549": "3bc8ae46cdb7227b12ea7b1935175188cf132708", "1604": "7fdffe0f3da6e9901f60ffe20bf6dbb62035a54b", "1829": "00883c1b1903f68e0161c709b9bc44f2ffbfc3d3", "1832": "7c650d629873fc035788d67d8c6368672f7a2022", "1897": "c34448988bd84e216960715a0d10155b69ee15d9", "1926": "15cf6e2ed7c2b179d7b6acb454b90c6b2d644f2f", "1929": "195a0ae13c09c5a103723a415ddee4fb746f213a", "1931": "663b8c37e7e838879d5a0550d01d0ef7edeebd2d", "2152": "da916489eee1c96fd5e03c2db53803186ab25cd7", "2165": "56315246190fb48defb12fd1d64462d50e88df43", "2167": "c62f1f016135c02ffddb4556162811dc5a8502c7", "2186": "81a2745ec984f7d99a4d0e763d312389bd57bcc4", "2190": "a70eda76b06e389d1e4212ce45c27997e302e4dd", "2210": "d3eb49975338611a49306a49331daedfbc06502a", "2214": "3f56f832cbcb59b3fcb46a79e844745369dc478f", "2216": "46d40445b7e4d7bc10a9f4682d3aeabf44310a66", "2219": "bafeaa0d420d05aa110afaac3c80203d7df2b142", "2228": "ffb4cc77e400c92b8d7740363da2e0432229e414", "2231": "570f9addfe51eeddb7256690ccb8269f8b387f05", "2233": "cc6023355fa93413f68452bcd6bdbc8b42fe139e", "2242": "159f8a978a2783d87644477854f2b1efe4b764b1", "2246": "f4746f697de073c53dfaf628d8e1d5446853cc38", "2259": "4999450c1abdefa5bfc735b3b67bac6de8655ce8", "2262": "89d690bae6cb26114930eb1fb41a6035452969f0", "2265": "7ac26c2c478919ff90794144e6a60f7309170180", "2290": "c612dbd05924e8cd6ab38e70bf1f745dcbfbc4a3", "2292": "0a68b41c3c2ce7823c6a78b99966e07872155a47", "2295": "398d0634ba228393e9fb0ee48229bd2534282099", "2329": "bf1dc228bc70bfa245f32908f28b90e58b2bb48d", "2335": "5d44bbbe5a32f3ff118445ea53c3c04ce920be48", "2341": "45f460a2b8a4e2159a442e1f140044fa543583b8", "2346": "1cdecea1aff3cda23fce52bfdb035967b53f3475", "2348": "219aba19897a4980b2eb05f066f11c859dfd98b2", "2352": "9a16f23c07ea9e679d4ae65590d35d57d2a2c14e", "2356": "936cf04d3f7accfc1d0099fdadc93f0c82c992ea", "2358": "fc747225d30bbe22f67b3738b7ef170142367883", "2366": "38de7be26963ba0a0e6dd204b18840bf5e89d627", "2369": "28b8eac1753c4dc128503a2d3c63ce426bccb8c8", "2388": "26efc748ffdeed423ce1a48d196c1f1450f9f8cb", "2390": "7071f689d60700a8c3b79b3da2395c765523d569", "2393": "bc01e2f5ec12fe2fea1ff1c9dca18d4b297a24e5", "2395": "bf184d4ca8ffd91061ab066dc0a79bccaf3fc19d", "2414": "f5e49a1c6c263937e754b24ae0dbd2eb17be52c6", "2428": "290ed699def131c7b78c39c40730d812d24b9589", "2430": "32cd52f58ceea8899717ddcc7fbc15a28fc0a0fa", "2438": "72455e7a9c7ec8af661a538a249e0ac8117411f0", "2441": "cb7f391d9e9fdbec2399b5ac480dc65b01beea1c", "2444": "dd2a50773c739d0b4be37438ce9639fa6a1fe1dc", "2449": "4d809bd1a238eb47e28dbcd319487ef1a578aef0", "2452": "d1020e85df908f8be34b8340a05af5e779244e67", "2460": "592ccfb573c673db5e7139b959a0b699c5685457", "2462": "4b3dda43a48b177a51ab5a31f2ec715cb5c50d3d", "2464": "42897c140bb350c7ef425580ab679a494e45f942", "2479": "2e7c1f5fe292147a63249844b0363f962aa32098", "2481": "dba2d3fa9ccdb76d0eb8ddf8aba25919dbe471c9", "2483": "3c6e7d3aa1061b8434254ee883bd8c6cc8492f67", "2485": "7134c18fae0c8d896576bb6e6da2d732f2fd9342", "2488": "8b693384f9e8ed1f935b15a40b4ebcf9ad914182", "2498": "d4525ce7d537ff13984e4a474bb7f5f22db68186", "2520": "31b3c5f8a38bc159601aef36bd9aa1433dbe9f71", "2529": "6a97f740ec34a3ec87d406ba532ae693450d4842", "2535": "6479a1b0743ac07fe69007164aaac6760e1c4691", "2538": "36a07a414a6f673f0891429355228efa9a8e4f86", "2543": "6b5b3a1e0b8f53d66f1b60b8f11e8bc3ba0b40df", "2546": "0f4f3b68e4347d0c53617b26316ec7f691818807", "2556": "fa3fa125f3ab1b14c493b78c8b9633698f061b6d", "2572": "3c1404095cd472661db5ebb3b7f778862a71ad65", "2575": "688045e259b7858702bd0777e9ef788e08992935", "2577": "d8719fd935f56123f7ecd6365af2e0f936b233f8", "2584": "5494109ce79942689c155faba5010eaaee19db09", "2595": "cc8100d58ff875bee9adeef70daf1b39e6eb5ece", "2605": "30d985624b6f00786b78e3b6ec21344afe396d69", "2607": "7b0ac8fbfe77c7a399b9a11a55076d6d02651046", "2615": "c37bfc87c69bcfdd6f1eb669f2b52d743fbf87f1", "2618": "57ca26a2be400af9716f3edbf56418f808c03edf", "2621": "1a9135ae00d8e6a4c46f5b29f943f11eb52d1e35", "2629": "b28031f922b09244087451d965905b27c2d5d06d", "2633": "a5bdf4952048fab8d8d15c5f29f8bcf1df12382e", "2636": "4af9f7ba6d1cabdcf63954ab6205929c1cdd74ea", "2639": "cf476447a8b3893bade867e0d3e69ad80200e557", "2656": "0a20812204cd94d9499d6a9f0386d5bcba99b2ea", "2678": "e5b56359f60d77814f1c95ce72d397f3d4caed07", "2687": "4e4dff9d2e02a63e503066ce6b9ebc0c7d80be5d", "2689": "e60b54771200af482c6e128d2c5649af5a0b15a5", "2695": "979e30343260460c8d1973aef8b75aa1ec62c5ad", "2701": "405269400405bc90eba28fab9b991ade0ecc592c", "2703": "f0f623015c0d7a9541a5bae990e680e0b9cc6c75", "2705": "9c38bd332742fde96730a1fb16d487f2392e2ff8", "2712": "816b78aa4e1a5a36a80e56c286b801f48711055f", "2715": "44bbcc82ee2644c87706d6af95c21b51414c65d3", "2720": "466bdbce542ad4cd7690033a90a3311ccf5aac9e", "2724": "5402b99c1c50b35365a8d93608acf3ea81b06c68", "2726": "1d25eaff833d18e6271ee64e0ebf1d1d1449c28a", "2764": "2bb8ca3bf20c1dd4550e52d69a1b3653488e2e2f", "2766": "88363fbae2392b19b590993afc833adb331b4fd8", "2812": "c2f90a3cbd79533a6aacdf6a16a45aaef426b62c", "2814": "edce672fcca9eafe73d35f79af48fa5653224903", "2816": "44493ac3f5755b43cc00370001d54a107ae876f9", "2818": "1c9c6056fabe3f462aa07e4ee564c8a37b7dd1db", "2820": "1f14139bd63e746aa1cb229d8a6ee8d071cfbaa6", "2832": "19ea0e3f5f4fd8cb24dfd21b885d593de6414603", "2835": "ef3a3cfd8ce4080443ddb1d6e16d6493a7642212", "2838": "5f8baf7e86713edd886c88fc1d62b1870a7d8a66", "2842": "f3ea60bb6112d216cb8d8eb6edf970b5b1fe22f0", "2848": "7bde0748e8e84ad014727cf3a9e18cd74985c34d", "2852": "8a509d22cba233faedd6399d0c22cb0adc9eaa61", "2854": "caefa12820ec93f66ad2126476401d4f716e0eeb", "2856": "90dc4e48021c53041c0c40d9ecfa5d86632e924c", "2859": "af8a03c39e3ff4c260fe0ba2b71f6e35c720e747", "2864": "8266a4f647eda48c98fc6be4c1ff5beebe9340ce", "2871": "94de20af88d1313e7a2fabfaa72b58679c68e1ab", "2890": "5f690f5fb5f3aed880e2ffd64a4bd820fa23e8f9", "2894": "9a302c177e2610d623d02cc3bf380acc193722ef", "2897": "bb10a075ce04e2fa59ce5b2af762da5569f5b87c", "2898": "d61ec65f6c47151b9f4a6645a7610e0e02f0fee8", "2901": "d0158dbafcc2a82583af5947b8da8073fc4fa170", "2904": "d3f6deeccfed6c1d37c8ef3a5f037fc2b4582414", "2906": "4bbe5e6ba5db472cab2ac55fed33edf2ab121452", "2908": "64cdc2d9f9569492d1e91f209baedc14e9c7a195", "2910": "945d686f78e2ef404881990e357c84266f9515fe", "2915": "70c80873cf8f1aba3a059706303006bcd136e80b", "2920": "afa193e4169c4cceb0c8915d0ba1fa297d021d7d", "2923": "e69f3d382ae429702b69bc65a0be5ae11be28fff", "2940": "9ccf3e0cb4575c11f41288cdc95a0a8f6f3875ac", "2942": "d5c31c831135bde0d24108d4d113331be2469c99", "2949": "33f51e92ce3e6f8d6982e023f5d6bf8dd34b1026", "2951": "ae53d69e41f0073ec68384f3dcb4a23a987bd933", "2957": "4418838463e3195f601c561d26d9acb32fcf2fb5", "2958": "47a2ade87c674234240af372f71611d22b19d8f4", "2963": "acfb2150c13a043db45b3c2e27b49ac9edbc21ee", "2970": "2fbef4e02b430e81de7df192a6bde57cbf62da1a", "2991": "278091384734b27a77c967d355ef22f5e78672d6", "2995": "915063376c3bfaa0423a5aec15af84e03f646ccb", "3001": "5a1031ca0ed00c1fb220f18340a22768ccb5f4cc", "3004": "fffe34e43f893f255e5027eb0245aec454f324bc", "3007": "549dd3be47d81e1df78249f017d459b12ef52c36", "3013": "ada66072ff20090fc435ea3aadbab9673436c0be", "3017": "7d8a8fb140ec2d4149c99b4fcaa9278d8d0135e3", "3045": "2a90fad0856fdcceedb526785fe0eb371b6b5aa0", "3051": "865e2f96018c6255d289c5c30fdfc8887cbb1d68", "3055": "966300810bceaf0d521acb212f33dd787ff4603c", "3057": "412d7ae400dfd3fe0b85a91ae83554020474e19f", "3059": "e54e79303d73dc8efb04ffed724289feeaaa5099", "3068": "97ffd9335a22fe74cba5de6ad80207dd82e03384", "3070": "1a071559ae3870845b7b2456669640f7daf155f7", "3077": "04a32131428e1ce12915d177e78b218cdf0b05de", "3083": "e1d743dacad26524c2de15cac9cf4b288f4d9cb4", "3084": "861110bc045b2b8c92f297e5a9274e2eb3201643", "3085": "04accb219f7685ebad1941da993e635d734d13cf", "3088": "fa47b391574cb7d48b20db093aca9ea734b9a01f", "3090": "c3df44f40b436c4bbec59d08a9b9352dc2e6715d", "3093": "8718ca4f50c928dd467a365b8b807c2bc705a47c", "3094": "d9254a0d1227ee68bf49a2cba3a79dd808008fea", "3096": "d00ccb0ca073551dfeb0425e13b59060415b2ef1", "3098": "22068993b87e11304ebcdf6366a62f4ecf651146", "3103": "e0693d11d6de88b36c9b4248a147d2f93be767c8", "3106": "957231050fe6b49059eae83268dda76d2be70e28", "3110": "255fdd85e70c4538399766df482b8e93d1fb8226", "3111": "1db95f27d6b2fcb66148cfeae0f0c8bc800ed1ff", "3112": "d141b753e6a46d08b5aad810e2f802d24677fb3d", "3116": "f5354c7e0d069e27d1bee35ea7e7cf344258ff54", "3119": "4a06d6654267ba094b05d4325dc9a7263673bebc", "3121": "fc3fd6f96bd1f4c019e4cf907777d277721c4a5d", "3123": "0b26d51c196200081dc0ec3877d542650c031411", "3127": "829149d53db07f259bb7e06b98b2ea5367a62b8a", "3128": "e1daab255c34a0e26a7f6908e5767189d94f015a", "3130": "bd8b779d62016de3d3f1d63d65225564eb0fa1f0", "3133": "abb4444178807a8989fc13d4e34502abe1cdbdeb", "3135": "644f714bb4cd49a2fa48311465aaf099c5a05175", "3137": "9155cbe3d5516818a2bcc51e6ebe2d635a6cde43", "3142": "af18d4cbb1d7c766af144fa363ac10feafc5d425", "3144": "8ddb647981dc8786c1f89d38db68f2bc5ddcaeb0", "3146": "c75a6b73541b2bba8de167973aca054aafe29a27", "3148": "31de84a310b2d83580cdc6a9ea297e49b4062361", "3151": "d825e7d97957914220c55d9fb06f5d932a7097a0", "3154": "f804a1e2ed3284bafcc25c7df14543f6c7d869a0", "3157": "0b6795dc746def59a7735b77bf4456895688a712", "3158": "880467e24c0b14aac2a3424c53453cf3ba6d4533", "3161": "6083dad38c602d441af1f09b225ad13a2eeb0d2a", "3162": "48b16cc0143ce63ebc4ce2735d0d1afc5f7bee5f", "3164": "5e092e4fa5783245f598eb532a2ab5746fcc5826", "3166": "7b60655ba812f6ce700b3a4be0b69e7c08671c60", "3169": "3af5c466073a09ae0ecd7e8750d0387265a7ce05", "3172": "791fd0b4c53dfcaddd1eae27c51e75ac2eca81b3", "3177": "7e5c456b15a75ce5aa53f53a3b9b51761fd53316", "3179": "ac0546c4dca407536a2b370b78b63a125770bbd3", "3190": "e6a4ea0b84948663d989b139b7edd25f7bcc078e", "3197": "84d9997b9b28414eb33c7a21e05fa88d9b232438", "3204": "71384ba2ca724ec04ee0708a1655f7b3bb63eb73", "3214": "ce68d05312f86389823d7949a53a1e8b258a5181", "3217": "621ff790578dbf1a08ef4247f9b36aa14a83598d", "3221": "40fbb742624bdedca955ba729c3c02be805d045a", "3223": "bfa529882d5d28cedd104ff9feb99774c5e613bb", "3228": "5cb2454fbaa2934f045ee85d2fd50a41bcd9a0e8", "3235": "3007059c6245edbc85472246032b1c485f1399cf", "3238": "5e5f76118bf91dc912187f3d5f680f49b01420a4", "3241": "6e2612db89a0b5ef4b11a119c588275018c7f118", "3242": "cf1b7ca6c81fe707fbf8498390a4f176fe5f5a48", "3244": "3db5399e3568c598fdd85b7d8a3fdadf99b69c21", "3247": "28fc9ab0c685acefca0fca9656b89da75c1e2b76", "3258": "85f05087b4cc479d6285d859f429155763b52db8", "3259": "40aec6654e6490028752798763665f5965285910", "3261": "b7926075b91c63eb72549dc7347649fc7b6f1a33", "3264": "3909c49601fad618f9758aff796df34a01a414fc", "3269": "55efd3826344161642d3452581af975809dda35a", "3274": "270263d37c211730080fb1bfb2765d9b9cff7ded", "3275": "6a7ea149b0c4a78f5ed56e8bdf69c3052de2d1e1", "3284": "bd9f96afb399cf3d5914180e97961a6b8c623bd1", "3285": "1930f422da7ffb8ca474fabbfed423ef1c856689", "3287": "1ec4e4bb93470419608ff44065b7d6f306c19c2c", "3289": "6f44945d1f533f9c4247903c5bc6de0264334331", "3295": "849e15696855d3051b382cbdf7fad09800a9796d", "3297": "49f2487d7121dd4c64c604e498330c32751d190f", "3302": "c6fe0005124d1f591b288650cb9c04c82502f86d", "3307": "0ed21ecdda543ce6f9c9321ac8feb63af8a2c5fd", "3317": "a5725580e6e926b32bacf22e7d12815b2e6b8873", "3327": "91f20e20b932540778fa894a3cb3fa53b2fe5183", "3331": "6d8014c6f7aff37ce5eae89ccc162ea5b67432b5", "3336": "afe16c43437f239127accdbde606ff5eaa597e2a", "3351": "a8f2f49d5dbeb8ffcd60d8250848d2ca1442f69c", "3358": "7a265739ee954793d3d93aa4d1a88f14240d4f0d", "3361": "3f708467d64b35d5a91380cad52a0983134ec1cc", "3364": "4316ea302ac76815a6b516560132330381995295", "3366": "539087c55faca06dddf50a197b83041b99e1a6b1", "3371": "e2d61db66fb1fa39a4d5c2b13df14d4ed66ac04f", "3376": "c292a2c3e860e8455d6b08af4710308bdf070ac0", "3377": "4d2f14af29e4d58d1484fc0bbe52159c03583b6e", "3379": "a8a28566de5632bb45e177e5965e4e98d5d6d8db", "3381": "c701c09902caa26c8874d3cdf7a0355b19f30d87", "3387": "31a3d57c537778abbf08ec6d1e80436097e716dc", "3391": "8bb092e783d3dcc0d8f18396b38f413f257ae906", "3395": "65cb6bb48ecc9e36ad418305c03394e6399283a0", "3400": "6d96635d365bc9eee928bee89e749d1ed8a5c718", "3404": "391b67f5c70b11153cda1170d63986acd218069a", "3406": "816e23cf9e48355d08ce4445b88aae047e11dc0a", "3408": "97ca6dd6a75f6ab80ff8c67ced62e4836970657b", "3410": "43aa07c77888ce7d818a9e368ba328120a543fff", "3425": "0746bb4d273636a9ce0eb3923593a5a3b7680cbc", "3430": "d484e4c6cfa3b7843cd9987c7f051bd74554407b"}, "revision_to_date": {"598": 1613161793000, "810": 1614804983000, "941": 1617301088000, "1060": 1620076303000, "1065": 1620152519000, "1097": 1623084703000, "1167": 1625260974000, "1192": 1627063721000, "1204": 1627923131000, "1235": 1628794692000, "1280": 1631387277000, "1320": 1634320864000, "1439": 1648071700000, "1476": 1650490540000, "1549": 1658948238000, "1604": 1661270575000, "1829": 1666897736000, "1832": 1666991473000, "1897": 1668705671000, "1926": 1675375056000, "1929": 1675788499000, "1931": 1675977451000, "2152": 1675984442000, "2165": 1677528834000, "2167": 1677533836000, "2186": 1677683247000, "2190": 1677688630000, "2210": 1677709749000, "2214": 1677772719000, "2216": 1677774519000, "2219": 1677779155000, "2228": 1677788626000, "2231": 1677792097000, "2233": 1677794849000, "2242": 1678296849000, "2246": 1678385568000, "2259": 1678738222000, "2262": 1678809931000, "2265": 1678812505000, "2290": 1679595104000, "2292": 1679597249000, "2295": 1679691850000, "2329": 1680111578000, "2335": 1680114800000, "2341": 1680129422000, "2346": 1680202581000, "2348": 1680238310000, "2352": 1680295225000, "2356": 1680312913000, "2358": 1680313549000, "2366": 1680712704000, "2369": 1680802620000, "2388": 1683230434000, "2390": 1683737207000, "2393": 1683742413000, "2395": 1683746214000, "2414": 1684460375000, "2428": 1685413908000, "2430": 1685484078000, "2438": 1685995315000, "2441": 1685998458000, "2444": 1686027215000, "2449": 1687373891000, "2452": 1687385141000, "2460": 1687469060000, "2462": 1687472098000, "2464": 1687575810000, "2479": 1688764625000, "2481": 1689003417000, "2483": 1689652482000, "2485": 1689711273000, "2488": 1692298808000, "2498": 1692811975000, "2520": 1694089572000, "2529": 1694197741000, "2535": 1694207383000, "2538": 1694209779000, "2543": 1694549445000, "2546": 1694559059000, "2556": 1694806276000, "2572": 1695241564000, "2575": 1695248034000, "2577": 1695255431000, "2584": 1695665138000, "2595": 1696373233000, "2605": 1697647974000, "2607": 1697663165000, "2615": 1698335198000, "2618": 1698339020000, "2621": 1698357144000, "2629": 1698432808000, "2633": 1698704596000, "2636": 1698715621000, "2639": 1698782516000, "2656": 1699480547000, "2678": 1699649192000, "2687": 1699902334000, "2689": 1699903926000, "2695": 1700168882000, "2701": 1700518426000, "2703": 1700520293000, "2705": 1700522356000, "2712": 1700706091000, "2715": 1701135368000, "2720": 1701799777000, "2724": 1701803866000, "2726": 1702343902000, "2764": 1702598795000, "2766": 1702659742000, "2812": 1703698282000, "2814": 1703698696000, "2816": 1703794588000, "2818": 1703795004000, "2820": 1704222794000, "2832": 1706556073000, "2835": 1706644107000, "2838": 1706655458000, "2842": 1707153545000, "2848": 1707173349000, "2852": 1707177143000, "2854": 1707238198000, "2856": 1707247100000, "2859": 1707797790000, "2864": 1707937608000, "2871": 1708476043000, "2890": 1708991827000, "2894": 1709052813000, "2897": 1709055466000, "2898": 1709056560000, "2901": 1709066856000, "2904": 1709071693000, "2906": 1709141211000, "2908": 1709605244000, "2910": 1710199038000, "2915": 1710878013000, "2920": 1710964414000, "2923": 1711043715000, "2940": 1711643897000, "2942": 1711646888000, "2949": 1711730274000, "2951": 1711731583000, "2957": 1712018916000, "2958": 1712024026000, "2963": 1712621681000, "2970": 1713227056000, "2991": 1713802177000, "2995": 1713823325000, "3001": 1713825782000, "3004": 1713888043000, "3007": 1713890877000, "3013": 1713993811000, "3017": 1713997720000, "3045": 1714586268000, "3051": 1714608817000, "3055": 1714760998000, "3057": 1715030631000, "3059": 1715049247000, "3068": 1715282568000, "3070": 1716256282000, "3077": 1717450701000, "3083": 1718673882000, "3084": 1718673929000, "3085": 1719008859000, "3088": 1721098680000, "3090": 1723058843000, "3093": 1725322789000, "3094": 1725327464000, "3096": 1725985713000, "3098": 1727136489000, "3103": 1727460864000, "3106": 1728339442000, "3110": 1728351417000, "3111": 1728351445000, "3112": 1728351459000, "3116": 1728577044000, "3119": 1730220993000, "3121": 1730223975000, "3123": 1730765567000, "3127": 1731369327000, "3128": 1731446498000, "3130": 1732046095000, "3133": 1732054699000, "3135": 1732577619000, "3137": 1733179051000, "3142": 1733775809000, "3144": 1733789382000, "3146": 1733790669000, "3148": 1735238690000, "3151": 1735595847000, "3154": 1736902331000, "3157": 1738021034000, "3158": 1738021076000, "3161": 1738092641000, "3162": 1738277391000, "3164": 1738619924000, "3166": 1738872396000, "3169": 1739294768000, "3172": 1739308733000, "3177": 1740505446000, "3179": 1740509809000, "3190": 1741108158000, "3197": 1741826155000, "3204": 1742226773000, "3214": 1742504434000, "3217": 1742834215000, "3221": 1742932731000, "3223": 1743468957000, "3228": 1743539787000, "3235": 1743643297000, "3238": 1743716147000, "3241": 1744055543000, "3242": 1744055574000, "3244": 1744756968000, "3247": 1745348400000, "3258": 1745865930000, "3259": 1745868592000, "3261": 1745890693000, "3264": 1745979433000, "3269": 1746121212000, "3274": 1746472418000, "3275": 1746489393000, "3284": 1747255154000, "3285": 1747255717000, "3287": 1747757518000, "3289": 1747769314000, "3295": 1748969267000, "3297": 1749576760000, "3302": 1750868047000, "3307": 1751057934000, "3317": 1751988261000, "3327": 1752540572000, "3331": 1752602389000, "3336": 1754339520000, "3351": 1755009658000, "3358": 1755559409000, "3361": 1755627385000, "3364": 1756237088000, "3366": 1756778002000, "3371": 1757434536000, "3376": 1757436516000, "3377": 1757437917000, "3379": 1757522540000, "3381": 1757523835000, "3387": 1757973468000, "3391": 1757978463000, "3395": 1758128047000, "3400": 1758665869000, "3404": 1759784004000, "3406": 1759851208000, "3408": 1759852998000, "3410": 1759854158000, "3425": 1760379269000, "3430": 1760382580000}, "params": {"arch": ["x64"], "cpu": ["2-core unknown"], "machine": ["GH-Actions"], "os": ["ubuntu-latest"], "ram": ["7GB"], "python": ["", "3.10", "3.13"], "branch": ["main"]}, "graph_param_list": [{"arch": "x64", "cpu": "2-core unknown", "machine": "GH-Actions", "os": "ubuntu-latest", "ram": "7GB", "python": "", "branch": "main"}, {"arch": "x64", "cpu": "2-core unknown", "machine": "GH-Actions", "os": "ubuntu-latest", "ram": "7GB", "python": "3.10", "branch": "main"}, {"arch": "x64", "cpu": "2-core unknown", "machine": "GH-Actions", "os": "ubuntu-latest", "ram": "7GB", "python": "3.13", "branch": "main"}], "benchmarks": {"bench_climatologies.Bench_calendar_average.time_calendar_average": {"code": "class Bench_calendar_average:\n    def time_calendar_average(self):\n        # hourly to daily\n        calendar_average(self.hourly, freq='day')\n\n    def setup(self):\n        self.hourly = _get_dummy_data('2020-01-01', '2021-12-31 23:00:00', 'h', 1, 1)", "min_run_count": 2, "name": "bench_climatologies.Bench_calendar_average.time_calendar_average", "number": 0, "param_names": [], "params": [], "repeat": 0, "rounds": 2, "sample_time": 0.01, "type": "time", "unit": "seconds", "version": "2e6b7fdbfa9b22363803965c4659d024391d3047169cb5956fbf5df9528d98cd", "warmup_time": -1}, "bench_climatologies.Bench_climate_anomaly.time_climate_anomaly": {"code": "class Bench_climate_anomaly:\n    def time_climate_anomaly(self):\n        # monthly anomaly\n        climate_anomaly(self.daily, 'month')\n\n    def setup(self):\n        self.daily = _get_dummy_data('2020-01-01', '2021-12-31', 'D', 1, 1)", "min_run_count": 2, "name": "bench_climatologies.Bench_climate_anomaly.time_climate_anomaly", "number": 0, "param_names": [], "params": [], "repeat": 0, "rounds": 2, "sample_time": 0.01, "type": "time", "unit": "seconds", "version": "e7074155919de5859ee64556b2a69f99cf78232b55e308be2d40ede070f11371", "warmup_time": -1}, "bench_climatologies.Bench_climatology_average.time_climatology_average": {"code": "class Bench_climatology_average:\n    def time_climatology_average(self):\n        # custom season\n        climatology_average(\n            self.monthly, freq='season', custom_seasons=['DJF', 'JJA', 'MAM', 'SON']\n        )\n\n    def setup(self):\n        self.monthly = _get_dummy_data('2020-01-01', '2021-12-01', 'MS', 1, 1)", "min_run_count": 2, "name": "bench_climatologies.Bench_climatology_average.time_climatology_average", "number": 0, "param_names": [], "params": [], "repeat": 0, "rounds": 2, "sample_time": 0.01, "type": "time", "unit": "seconds", "version": "79add8b79fba74c516c391e5fcbedc2c2ff68d62f471b47b0d34f1513d1d55b5", "warmup_time": -1}, "bench_climatologies.Bench_month_to_season.time_month_to_season": {"code": "class Bench_month_to_season:\n    def time_month_to_season(self):\n        month_to_season(self.ds, \"JJA\")\n\n    def setup(self):\n        self.ds = get_fake_dataset(start_month=\"2000-01\", nmonths=12, nlats=3, nlons=1)", "min_run_count": 2, "name": "bench_climatologies.Bench_month_to_season.time_month_to_season", "number": 0, "param_names": [], "params": [], "repeat": 0, "rounds": 2, "sample_time": 0.01, "type": "time", "unit": "seconds", "version": "83fa155d938d3086b306f2f2fff4a80571c9bd63f5753ba84e1e21a1a633ef80", "warmup_time": -1}, "bench_fourier.Bench_fourier.peakmem_band_block": {"code": "class Bench_fourier:\n    def peakmem_band_block(self):\n        fourier_band_block(self.t_data, self.freq, 3, 30, time_axis=0)\n\n    def setup(self):\n        self.freq = 200\n        t = np.arange(200) / self.freq\n        t = t[:, None] + t\n        t = t[:, :, None] + t\n        self.t_data = (\n            np.sin(t * tau) / 0.1\n            + np.sin(2 * t * tau) / 0.2\n            + np.sin(5 * t * tau) / 0.5\n            + np.sin(10 * t * tau)\n            + np.sin(20 * t * tau) / 2\n            + np.sin(50 * t * tau) / 5\n            + np.sin(100 * t * tau) / 10\n        )", "name": "bench_fourier.Bench_fourier.peakmem_band_block", "param_names": [], "params": [], "type": "peakmemory", "unit": "bytes", "version": "60e2a079316683768604882fc9ff0f191f22a4cc54047ef318954d30aee1c745"}, "bench_fourier.Bench_fourier.time_band_block": {"code": "class Bench_fourier:\n    def time_band_block(self):\n        fourier_band_block(self.t_data, self.freq, 3, 30, time_axis=0)\n\n    def setup(self):\n        self.freq = 200\n        t = np.arange(200) / self.freq\n        t = t[:, None] + t\n        t = t[:, :, None] + t\n        self.t_data = (\n            np.sin(t * tau) / 0.1\n            + np.sin(2 * t * tau) / 0.2\n            + np.sin(5 * t * tau) / 0.5\n            + np.sin(10 * t * tau)\n            + np.sin(20 * t * tau) / 2\n            + np.sin(50 * t * tau) / 5\n            + np.sin(100 * t * tau) / 10\n        )", "min_run_count": 2, "name": "bench_fourier.Bench_fourier.time_band_block", "number": 0, "param_names": [], "params": [], "repeat": 0, "rounds": 2, "sample_time": 0.01, "type": "time", "unit": "seconds", "version": "e4879fe8c246ef21be8111a4d4289ea25b26418f03895fcbc95cf205de12e951", "warmup_time": -1}, "bench_interpolation.Bench_interp_hybrid_to_pressure.peakmem_interp_hybrid_to_pressure": {"code": "class Bench_interp_hybrid_to_pressure:\n    def peakmem_interp_hybrid_to_pressure(self):\n        interp_hybrid_to_pressure(\n            self.data,\n            self.ps,\n            self._hyam,\n            self._hybm,\n            p0=self._p0,\n            new_levels=self.pres3d,\n            method=\"log\",\n        )\n\n    def setup(self):\n        # Load test data\n        try:\n            self.ds_atmos = xr.open_dataset(\n                gdf.get(\"netcdf_files/atmos.nc\"), decode_times=False\n            )\n        except Exception:\n            self.ds_atmos = xr.open_dataset(\"test/atmos.nc\", decode_times=False)\n    \n        # Set up input parameters similar to test class\n        self._hyam = self.ds_atmos.hyam\n        self._hybm = self.ds_atmos.hybm\n        self._p0 = 1000.0 * 100  # Pa\n    \n        self.data = self.ds_atmos.U[0, :, :, :]\n        self.ps = self.ds_atmos.PS[0, :, :]\n        self.pres3d = np.asarray([1000, 950, 800, 700, 600, 500, 400, 300, 200]) * 100", "name": "bench_interpolation.Bench_interp_hybrid_to_pressure.peakmem_interp_hybrid_to_pressure", "param_names": [], "params": [], "type": "peakmemory", "unit": "bytes", "version": "beb4184b38941f397936088949dabaed43018c7743d5482eedd636fa495ebb73"}, "bench_interpolation.Bench_interp_hybrid_to_pressure.time_interp_hybrid_to_pressure": {"code": "class Bench_interp_hybrid_to_pressure:\n    def time_interp_hybrid_to_pressure(self):\n        interp_hybrid_to_pressure(\n            self.data,\n            self.ps,\n            self._hyam,\n            self._hybm,\n            p0=self._p0,\n            new_levels=self.pres3d,\n            method=\"log\",\n        )\n\n    def setup(self):\n        # Load test data\n        try:\n            self.ds_atmos = xr.open_dataset(\n                gdf.get(\"netcdf_files/atmos.nc\"), decode_times=False\n            )\n        except Exception:\n            self.ds_atmos = xr.open_dataset(\"test/atmos.nc\", decode_times=False)\n    \n        # Set up input parameters similar to test class\n        self._hyam = self.ds_atmos.hyam\n        self._hybm = self.ds_atmos.hybm\n        self._p0 = 1000.0 * 100  # Pa\n    \n        self.data = self.ds_atmos.U[0, :, :, :]\n        self.ps = self.ds_atmos.PS[0, :, :]\n        self.pres3d = np.asarray([1000, 950, 800, 700, 600, 500, 400, 300, 200]) * 100", "min_run_count": 2, "name": "bench_interpolation.Bench_interp_hybrid_to_pressure.time_interp_hybrid_to_pressure", "number": 0, "param_names": [], "params": [], "repeat": 0, "rounds": 2, "sample_time": 0.01, "type": "time", "unit": "seconds", "version": "341dffd86bf83824e6014aaf35144155b7eb4c78f15024ab589efb67bed09068", "warmup_time": -1}, "bench_interpolation.Bench_interp_hybrid_to_pressure_extrap_temp.peakmem_interp_hybrid_to_pressure_extrap_temp": {"code": "class Bench_interp_hybrid_to_pressure_extrap_temp:\n    def peakmem_interp_hybrid_to_pressure_extrap_temp(self):\n        interp_hybrid_to_pressure(\n            self.temp_in,\n            self.press_in,\n            self._hyam,\n            self._hybm,\n            p0=self._p0,\n            new_levels=self.new_levels,\n            method=\"linear\",\n            extrapolate=True,\n            variable='temperature',\n            t_bot=self.temp_in.isel(lev=-1, drop=True),\n            phi_sfc=self.phis,\n        )\n\n    def setup(self):\n        # Load test data\n        try:\n            self.ds_ccsm = xr.open_dataset(\n                gdf.get(\"netcdf_files/ccsm35.h0.0021-01.demo.nc\"), decode_times=False\n            )\n        except Exception:\n            self.ds_ccsm = xr.open_dataset(\n                \"test/ccsm35.h0.0021-01.demo.nc\", decode_times=False\n            )\n    \n        # Set up input parameters similar to test class\n        self.temp_in = self.ds_ccsm.T[:, :, :3, :2]\n        self.press_in = self.ds_ccsm.PS[:, :3, :2]\n        self._hyam = self.ds_ccsm.hyam\n        self._hybm = self.ds_ccsm.hybm\n        self._p0 = 1000 * 100  # reference pressure in Pa\n        self.new_levels = np.asarray([500, 925, 950, 1000])\n        self.new_levels *= 100  # new levels in Pa\n        self.phis = self.ds_ccsm.PHIS[:, :3, :2]", "name": "bench_interpolation.Bench_interp_hybrid_to_pressure_extrap_temp.peakmem_interp_hybrid_to_pressure_extrap_temp", "param_names": [], "params": [], "type": "peakmemory", "unit": "bytes", "version": "6794ebb08a5821f7370451f7567f378a44dfe8ea2e3c1a606944ab8acf313190"}, "bench_interpolation.Bench_interp_hybrid_to_pressure_extrap_temp.time_interp_hybrid_to_pressure_extrap_temp": {"code": "class Bench_interp_hybrid_to_pressure_extrap_temp:\n    def time_interp_hybrid_to_pressure_extrap_temp(self):\n        interp_hybrid_to_pressure(\n            self.temp_in,\n            self.press_in,\n            self._hyam,\n            self._hybm,\n            p0=self._p0,\n            new_levels=self.new_levels,\n            method=\"linear\",\n            extrapolate=True,\n            variable='temperature',\n            t_bot=self.temp_in.isel(lev=-1, drop=True),\n            phi_sfc=self.phis,\n        )\n\n    def setup(self):\n        # Load test data\n        try:\n            self.ds_ccsm = xr.open_dataset(\n                gdf.get(\"netcdf_files/ccsm35.h0.0021-01.demo.nc\"), decode_times=False\n            )\n        except Exception:\n            self.ds_ccsm = xr.open_dataset(\n                \"test/ccsm35.h0.0021-01.demo.nc\", decode_times=False\n            )\n    \n        # Set up input parameters similar to test class\n        self.temp_in = self.ds_ccsm.T[:, :, :3, :2]\n        self.press_in = self.ds_ccsm.PS[:, :3, :2]\n        self._hyam = self.ds_ccsm.hyam\n        self._hybm = self.ds_ccsm.hybm\n        self._p0 = 1000 * 100  # reference pressure in Pa\n        self.new_levels = np.asarray([500, 925, 950, 1000])\n        self.new_levels *= 100  # new levels in Pa\n        self.phis = self.ds_ccsm.PHIS[:, :3, :2]", "min_run_count": 2, "name": "bench_interpolation.Bench_interp_hybrid_to_pressure_extrap_temp.time_interp_hybrid_to_pressure_extrap_temp", "number": 0, "param_names": [], "params": [], "repeat": 0, "rounds": 2, "sample_time": 0.01, "type": "time", "unit": "seconds", "version": "ecea8f1fe7570ef05af8d219f55a3181108b3e44fb472c073977c60d5972f28c", "warmup_time": -1}, "bench_interpolation.Bench_interp_multidim.peakmem_interp_multidim_chunk": {"code": "class Bench_interp_multidim:\n    def peakmem_interp_multidim_chunk(self):\n        interp_multidim(\n            self.test_input.chunk(2),\n            self.test_output.coords['lat'],\n            self.test_output.coords['lon'],\n        )\n\n    def setup(self):\n        self.test_input = xr.load_dataset(\n            gdf.get(\"netcdf_files/spherical_noise_input.nc\")\n        )['spherical_noise']\n        self.test_output = xr.load_dataset(\n            gdf.get(\"netcdf_files/spherical_noise_output.nc\")\n        )['spherical_noise']", "name": "bench_interpolation.Bench_interp_multidim.peakmem_interp_multidim_chunk", "param_names": [], "params": [], "type": "peakmemory", "unit": "bytes", "version": "8a4c13960428f0a331f72b243e6bdd19e9ad8628aa8532237a386e4bf33cbe21"}, "bench_interpolation.Bench_interp_multidim.time_interp_multidim_chunk": {"code": "class Bench_interp_multidim:\n    def time_interp_multidim_chunk(self):\n        interp_multidim(\n            self.test_input.chunk(2),\n            self.test_output.coords['lat'],\n            self.test_output.coords['lon'],\n        )\n\n    def setup(self):\n        self.test_input = xr.load_dataset(\n            gdf.get(\"netcdf_files/spherical_noise_input.nc\")\n        )['spherical_noise']\n        self.test_output = xr.load_dataset(\n            gdf.get(\"netcdf_files/spherical_noise_output.nc\")\n        )['spherical_noise']", "min_run_count": 2, "name": "bench_interpolation.Bench_interp_multidim.time_interp_multidim_chunk", "number": 0, "param_names": [], "params": [], "repeat": 0, "rounds": 2, "sample_time": 0.01, "type": "time", "unit": "seconds", "version": "b48f5a7600d5491fc92f120637ff7d2b551815440c821f639195892b60c74ee7", "warmup_time": -1}, "bench_interpolation.Bench_interp_sigma_to_hybrid.time_interp_sigma_to_hybrid_1d": {"code": "class Bench_interp_sigma_to_hybrid:\n    def time_interp_sigma_to_hybrid_1d(self):\n        interp_sigma_to_hybrid(\n            self.u[:, 0, 0],\n            self.sigma,\n            self.ps[0, 0],\n            self.hyam,\n            self.hybm,\n            p0=self._p0,\n            method=\"linear\",\n        )\n\n    def setup(self):\n        # Open the netCDF data file \"u.89335.1.nc\" and read in input data\n        try:\n            ds_u = xr.open_dataset(\n                gdf.get(\"netcdf_files/u.89335.1_subset_time361.nc\"), decode_times=False\n            )\n        except Exception:\n            ds_u = xr.open_dataset(\n                \"test/u.89335.1_subset_time361.nc\", decode_times=False\n            )\n    \n        try:\n            ds_ps = xr.open_dataset(\n                gdf.get(\"netcdf_files/ps.89335.1.nc\"), decode_times=False\n            )\n        except Exception:\n            ds_ps = xr.open_dataset(\"test/ps.89335.1.nc\", decode_times=False)\n    \n        self.hyam = xr.DataArray([0.0108093, 0.0130731, 0.03255911, 0.0639471])\n        self.hybm = xr.DataArray([0.0108093, 0.0173664, 0.06069280, 0.1158237])\n    \n        self.u = ds_u.u[:, 0:3, 0:2]\n        self.ps = ds_ps.ps[361, 0:3, 0:2] * 100  # Pa\n        self._p0 = 1000.0 * 100  # Pa\n        self.sigma = ds_ps.sigma", "min_run_count": 2, "name": "bench_interpolation.Bench_interp_sigma_to_hybrid.time_interp_sigma_to_hybrid_1d", "number": 0, "param_names": [], "params": [], "repeat": 0, "rounds": 2, "sample_time": 0.01, "type": "time", "unit": "seconds", "version": "6288b9b92c396617c64a5dfb06e83e8df9386aa7213d9d947dc4157c2d6794a7", "warmup_time": -1}, "bench_interpolation.Bench_interp_sigma_to_hybrid.time_interp_sigma_to_hybrid_3d": {"code": "class Bench_interp_sigma_to_hybrid:\n    def time_interp_sigma_to_hybrid_3d(self):\n        interp_sigma_to_hybrid(\n            self.u,\n            self.sigma,\n            self.ps,\n            self.hyam,\n            self.hybm,\n            p0=self._p0,\n            method=\"linear\",\n        )\n\n    def setup(self):\n        # Open the netCDF data file \"u.89335.1.nc\" and read in input data\n        try:\n            ds_u = xr.open_dataset(\n                gdf.get(\"netcdf_files/u.89335.1_subset_time361.nc\"), decode_times=False\n            )\n        except Exception:\n            ds_u = xr.open_dataset(\n                \"test/u.89335.1_subset_time361.nc\", decode_times=False\n            )\n    \n        try:\n            ds_ps = xr.open_dataset(\n                gdf.get(\"netcdf_files/ps.89335.1.nc\"), decode_times=False\n            )\n        except Exception:\n            ds_ps = xr.open_dataset(\"test/ps.89335.1.nc\", decode_times=False)\n    \n        self.hyam = xr.DataArray([0.0108093, 0.0130731, 0.03255911, 0.0639471])\n        self.hybm = xr.DataArray([0.0108093, 0.0173664, 0.06069280, 0.1158237])\n    \n        self.u = ds_u.u[:, 0:3, 0:2]\n        self.ps = ds_ps.ps[361, 0:3, 0:2] * 100  # Pa\n        self._p0 = 1000.0 * 100  # Pa\n        self.sigma = ds_ps.sigma", "min_run_count": 2, "name": "bench_interpolation.Bench_interp_sigma_to_hybrid.time_interp_sigma_to_hybrid_3d", "number": 0, "param_names": [], "params": [], "repeat": 0, "rounds": 2, "sample_time": 0.01, "type": "time", "unit": "seconds", "version": "7ad68ee715d277c269bfa1715f13a853680f0ff34a926acc182e6cf95396a41c", "warmup_time": -1}, "bench_meteorology.Bench_actual_saturation_vapor_pressure.time_actual_saturation_vapor_pressure": {"code": "class Bench_actual_saturation_vapor_pressure:\n    def time_actual_saturation_vapor_pressure(self):\n        actual_saturation_vapor_pressure(self.temp, tfill=1.0000000e20)\n\n    def setup(self):\n        self.temp = np.arange(1, 101, 1)", "min_run_count": 2, "name": "bench_meteorology.Bench_actual_saturation_vapor_pressure.time_actual_saturation_vapor_pressure", "number": 0, "param_names": [], "params": [], "repeat": 0, "rounds": 2, "sample_time": 0.01, "type": "time", "unit": "seconds", "version": "dadebe7f3314e3dcfba2d8c8506aff1e5f77b424d122c608dc666fefe601d207", "warmup_time": -1}, "bench_meteorology.Bench_delta_pressure.time_delta_pressure": {"code": "class Bench_delta_pressure:\n    def time_delta_pressure(self):\n        delta_pressure(self.pressure_lev, self.surface_pressure_scalar)\n\n    def setup(self):\n        self.pressure_lev = np.array([1, 5, 100, 1000], dtype=np.float64)\n        self.surface_pressure_scalar = 1018.0", "min_run_count": 2, "name": "bench_meteorology.Bench_delta_pressure.time_delta_pressure", "number": 0, "param_names": [], "params": [], "repeat": 0, "rounds": 2, "sample_time": 0.01, "type": "time", "unit": "seconds", "version": "afee1296d27ebefa412ce19c19b1fef4aa4e72e25d7b12e2f5ed511e6a208dd1", "warmup_time": -1}, "bench_meteorology.Bench_dewtemp.time_dewtemp": {"code": "class Bench_dewtemp:\n    def time_dewtemp(self):\n        xr.DataArray(self.rh_def)\n\n    def setup(self):\n        # fmt: off\n        self.rh_def = [75.0, 60.0, 61.1, 76.7, 90.5, 89.8, 78.3, 76.5, 46.0, 55.0, 63.8, 53.2, 42.9, 41.7, 51.0, 70.6, 50.0, 50.0]\n        # fmt: on", "min_run_count": 2, "name": "bench_meteorology.Bench_dewtemp.time_dewtemp", "number": 0, "param_names": [], "params": [], "repeat": 0, "rounds": 2, "sample_time": 0.01, "type": "time", "unit": "seconds", "version": "48011b7369bbddbc495ec2a2a047744261a4f7a17fb339d86f5869e4ee2ef11a", "warmup_time": -1}, "bench_meteorology.Bench_heat_index.time_heat_index": {"code": "class Bench_heat_index:\n    def time_heat_index(self):\n        heat_index(self.t, self.rh, True)\n\n    def setup(self):\n        self.t = np.array([70, 75, 80, 85, 90, 95, 100, 105, 110, 115])\n        self.rh = np.array([10, 75, 15, 80, 65, 25, 30, 40, 50, 5])", "min_run_count": 2, "name": "bench_meteorology.Bench_heat_index.time_heat_index", "number": 0, "param_names": [], "params": [], "repeat": 0, "rounds": 2, "sample_time": 0.01, "type": "time", "unit": "seconds", "version": "97f901f8dc546422188de414bc13a38d88a48f419a7e88ce5884f452dc3a1078", "warmup_time": -1}, "bench_meteorology.Bench_max_daylight.time_max_daylight": {"code": "class Bench_max_daylight:\n    def time_max_daylight(self):\n        max_daylight(self.jday, self.lat)\n\n    def setup(self):\n        self.jday = np.linspace(1, 365, num=365)\n        self.lat = np.linspace(-66, 66, num=133)", "min_run_count": 2, "name": "bench_meteorology.Bench_max_daylight.time_max_daylight", "number": 0, "param_names": [], "params": [], "repeat": 0, "rounds": 2, "sample_time": 0.01, "type": "time", "unit": "seconds", "version": "a620b9fb1c9ab80c3c604b31cb63f0131360bfeba33a7cf8ca7840898b89e718", "warmup_time": -1}, "bench_meteorology.Bench_psychrometric_constant.time_psychrometric_constant": {"code": "class Bench_psychrometric_constant:\n    def time_psychrometric_constant(self):\n        psychrometric_constant(self.pressure)\n\n    def setup(self):\n        self.pressure = np.arange(1, 101, 1)", "min_run_count": 2, "name": "bench_meteorology.Bench_psychrometric_constant.time_psychrometric_constant", "number": 0, "param_names": [], "params": [], "repeat": 0, "rounds": 2, "sample_time": 0.01, "type": "time", "unit": "seconds", "version": "f8d4c9fd92db24890de102f93fe9e52872a37100c94b2c55280ccd716269cd44", "warmup_time": -1}, "bench_meteorology.Bench_relhum.time_relhum": {"code": "class Bench_relhum:\n    def time_relhum(self):\n        relhum(self.t_def, self.q_def, self.p_def)\n\n    def setup(self):\n        # fmt: off\n        self.p_def = [\n            100800, 100000, 95000, 90000, 85000, 80000, 75000, 70000, 65000, 60000, 55000, 50000, 45000, 40000, 35000, 30000,\n            25000, 20000, 17500, 15000, 12500, 10000, 8000, 7000, 6000, 5000, 4000, 3000, 2500, 2000\n        ]\n    \n        self.t_def = [\n            302.45, 301.25, 296.65, 294.05, 291.55, 289.05, 286.25, 283.25, 279.85, 276.25, 272.65, 268.65, 264.15, 258.35, 251.65,\n            243.45, 233.15, 220.75, 213.95, 206.65, 199.05, 194.65, 197.15, 201.55, 206.45, 211.85, 216.85, 221.45, 222.45, 225.65\n        ]\n    \n        self.q_def = [\n            0.02038, 0.01903, 0.01614, 0.01371, 0.01156, 0.0098, 0.00833, 0.00675, 0.00606, 0.00507, 0.00388, 0.00329, 0.00239,\n            0.0017, 0.001, 0.0006, 0.0002, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0\n        ]\n        # fmt: on", "min_run_count": 2, "name": "bench_meteorology.Bench_relhum.time_relhum", "number": 0, "param_names": [], "params": [], "repeat": 0, "rounds": 2, "sample_time": 0.01, "type": "time", "unit": "seconds", "version": "12dabc5f49074cc7346e68ff3296a1196210b9f35df9a3877dc544375fadc7b7", "warmup_time": -1}, "bench_meteorology.Bench_saturation_vapor_pressure.time_saturation_vapor_pressure": {"code": "class Bench_saturation_vapor_pressure:\n    def time_saturation_vapor_pressure(self):\n        saturation_vapor_pressure(self.temp, tfill=1.0000000e20)\n\n    def setup(self):\n        self.temp = np.arange(1, 101, 1)", "min_run_count": 2, "name": "bench_meteorology.Bench_saturation_vapor_pressure.time_saturation_vapor_pressure", "number": 0, "param_names": [], "params": [], "repeat": 0, "rounds": 2, "sample_time": 0.01, "type": "time", "unit": "seconds", "version": "93fa3cacb15c9cd219a04021a2e31a23b51c1d5409784c00743745faf1ea82b1", "warmup_time": -1}, "bench_meteorology.Bench_saturation_vapor_pressure_slope.time_saturation_vapor_pressure_slope": {"code": "class Bench_saturation_vapor_pressure_slope:\n    def time_saturation_vapor_pressure_slope(self):\n        saturation_vapor_pressure_slope(self.temp)\n\n    def setup(self):\n        self.temp = np.arange(1, 101, 1)", "min_run_count": 2, "name": "bench_meteorology.Bench_saturation_vapor_pressure_slope.time_saturation_vapor_pressure_slope", "number": 0, "param_names": [], "params": [], "repeat": 0, "rounds": 2, "sample_time": 0.01, "type": "time", "unit": "seconds", "version": "dd42ec67e1bd2c46f72b0b460d99dfdcab789acbe6e9b917236d1c5c5219dd59", "warmup_time": -1}, "bench_spherical.Bench_spherical.peakmem_decomposition": {"code": "class Bench_spherical:\n    def peakmem_decomposition(self):\n        decomposition(self.test_data, self.test_scale, self.theta_grid, self.phi_grid)\n\n    def setup(self):\n        max_harm = 23\n        num_phi = 90\n        num_theta = 180\n    \n        theta = np.linspace(0, tau - tau / num_theta, num_theta)\n        phi = np.linspace(\n            pi / (2 * num_phi),\n            pi - pi / (2 * num_phi),\n            num_phi,\n        )\n        self.theta_grid, self.phi_grid = np.meshgrid(theta, phi)\n        self.test_scale = np.sin(self.phi_grid)\n    \n        count = 0\n        primes = [0, 2, 3, 5, 7, 11, 13, 17, 19, 23]\n        self.test_data = np.zeros(self.phi_grid.shape)\n        self.test_results = []\n        test_harmonics = []\n        for n in range(max_harm + 1):\n            for m in range(n + 1):\n                test_harmonics.append([n, m])\n                self.test_results.append(0)\n                if n in primes and m in primes:\n                    if m in primes[1::2]:\n                        self.test_data += sph_harm_y(\n                            n,\n                            m,\n                            self.phi_grid,\n                            self.theta_grid,\n                        ).imag\n                        self.test_results[-1] = 1j\n                        count += 1\n                    else:\n                        self.test_data += sph_harm_y(\n                            n,\n                            m,\n                            self.phi_grid,\n                            self.theta_grid,\n                        ).real\n                        self.test_results[-1] = 1\n                        count += 1", "name": "bench_spherical.Bench_spherical.peakmem_decomposition", "param_names": [], "params": [], "type": "peakmemory", "unit": "bytes", "version": "c22765cc83951fd6a2341975431ab5b4c27200b50a5710dc430a0fe5ccd98a19"}, "bench_spherical.Bench_spherical.peakmem_recomposition": {"code": "class Bench_spherical:\n    def peakmem_recomposition(self):\n        recomposition(self.test_results, self.theta_grid, self.phi_grid)\n\n    def setup(self):\n        max_harm = 23\n        num_phi = 90\n        num_theta = 180\n    \n        theta = np.linspace(0, tau - tau / num_theta, num_theta)\n        phi = np.linspace(\n            pi / (2 * num_phi),\n            pi - pi / (2 * num_phi),\n            num_phi,\n        )\n        self.theta_grid, self.phi_grid = np.meshgrid(theta, phi)\n        self.test_scale = np.sin(self.phi_grid)\n    \n        count = 0\n        primes = [0, 2, 3, 5, 7, 11, 13, 17, 19, 23]\n        self.test_data = np.zeros(self.phi_grid.shape)\n        self.test_results = []\n        test_harmonics = []\n        for n in range(max_harm + 1):\n            for m in range(n + 1):\n                test_harmonics.append([n, m])\n                self.test_results.append(0)\n                if n in primes and m in primes:\n                    if m in primes[1::2]:\n                        self.test_data += sph_harm_y(\n                            n,\n                            m,\n                            self.phi_grid,\n                            self.theta_grid,\n                        ).imag\n                        self.test_results[-1] = 1j\n                        count += 1\n                    else:\n                        self.test_data += sph_harm_y(\n                            n,\n                            m,\n                            self.phi_grid,\n                            self.theta_grid,\n                        ).real\n                        self.test_results[-1] = 1\n                        count += 1", "name": "bench_spherical.Bench_spherical.peakmem_recomposition", "param_names": [], "params": [], "type": "peakmemory", "unit": "bytes", "version": "dcddd91b963deb0ed7de3bc51f41fc47d49b64afd9af8eb3ff09368b47378c7b"}, "bench_spherical.Bench_spherical.peakmem_scale_voronoi": {"code": "class Bench_spherical:\n    def peakmem_scale_voronoi(self):\n        scale_voronoi(self.theta_grid, self.phi_grid)\n\n    def setup(self):\n        max_harm = 23\n        num_phi = 90\n        num_theta = 180\n    \n        theta = np.linspace(0, tau - tau / num_theta, num_theta)\n        phi = np.linspace(\n            pi / (2 * num_phi),\n            pi - pi / (2 * num_phi),\n            num_phi,\n        )\n        self.theta_grid, self.phi_grid = np.meshgrid(theta, phi)\n        self.test_scale = np.sin(self.phi_grid)\n    \n        count = 0\n        primes = [0, 2, 3, 5, 7, 11, 13, 17, 19, 23]\n        self.test_data = np.zeros(self.phi_grid.shape)\n        self.test_results = []\n        test_harmonics = []\n        for n in range(max_harm + 1):\n            for m in range(n + 1):\n                test_harmonics.append([n, m])\n                self.test_results.append(0)\n                if n in primes and m in primes:\n                    if m in primes[1::2]:\n                        self.test_data += sph_harm_y(\n                            n,\n                            m,\n                            self.phi_grid,\n                            self.theta_grid,\n                        ).imag\n                        self.test_results[-1] = 1j\n                        count += 1\n                    else:\n                        self.test_data += sph_harm_y(\n                            n,\n                            m,\n                            self.phi_grid,\n                            self.theta_grid,\n                        ).real\n                        self.test_results[-1] = 1\n                        count += 1", "name": "bench_spherical.Bench_spherical.peakmem_scale_voronoi", "param_names": [], "params": [], "type": "peakmemory", "unit": "bytes", "version": "12dde2aedf2708c21eed3eb5d0e701994599de36381ba80c903901a79ce5c314"}, "bench_spherical.Bench_spherical.time_decomposition": {"code": "class Bench_spherical:\n    def time_decomposition(self):\n        decomposition(self.test_data, self.test_scale, self.theta_grid, self.phi_grid)\n\n    def setup(self):\n        max_harm = 23\n        num_phi = 90\n        num_theta = 180\n    \n        theta = np.linspace(0, tau - tau / num_theta, num_theta)\n        phi = np.linspace(\n            pi / (2 * num_phi),\n            pi - pi / (2 * num_phi),\n            num_phi,\n        )\n        self.theta_grid, self.phi_grid = np.meshgrid(theta, phi)\n        self.test_scale = np.sin(self.phi_grid)\n    \n        count = 0\n        primes = [0, 2, 3, 5, 7, 11, 13, 17, 19, 23]\n        self.test_data = np.zeros(self.phi_grid.shape)\n        self.test_results = []\n        test_harmonics = []\n        for n in range(max_harm + 1):\n            for m in range(n + 1):\n                test_harmonics.append([n, m])\n                self.test_results.append(0)\n                if n in primes and m in primes:\n                    if m in primes[1::2]:\n                        self.test_data += sph_harm_y(\n                            n,\n                            m,\n                            self.phi_grid,\n                            self.theta_grid,\n                        ).imag\n                        self.test_results[-1] = 1j\n                        count += 1\n                    else:\n                        self.test_data += sph_harm_y(\n                            n,\n                            m,\n                            self.phi_grid,\n                            self.theta_grid,\n                        ).real\n                        self.test_results[-1] = 1\n                        count += 1", "min_run_count": 2, "name": "bench_spherical.Bench_spherical.time_decomposition", "number": 0, "param_names": [], "params": [], "repeat": 0, "rounds": 2, "sample_time": 0.01, "type": "time", "unit": "seconds", "version": "3e5747ba253361d8fc9a96762cd871d88823373b9305c6ba60f4fe5a555ae21d", "warmup_time": -1}, "bench_spherical.Bench_spherical.time_recomposition": {"code": "class Bench_spherical:\n    def time_recomposition(self):\n        recomposition(self.test_results, self.theta_grid, self.phi_grid)\n\n    def setup(self):\n        max_harm = 23\n        num_phi = 90\n        num_theta = 180\n    \n        theta = np.linspace(0, tau - tau / num_theta, num_theta)\n        phi = np.linspace(\n            pi / (2 * num_phi),\n            pi - pi / (2 * num_phi),\n            num_phi,\n        )\n        self.theta_grid, self.phi_grid = np.meshgrid(theta, phi)\n        self.test_scale = np.sin(self.phi_grid)\n    \n        count = 0\n        primes = [0, 2, 3, 5, 7, 11, 13, 17, 19, 23]\n        self.test_data = np.zeros(self.phi_grid.shape)\n        self.test_results = []\n        test_harmonics = []\n        for n in range(max_harm + 1):\n            for m in range(n + 1):\n                test_harmonics.append([n, m])\n                self.test_results.append(0)\n                if n in primes and m in primes:\n                    if m in primes[1::2]:\n                        self.test_data += sph_harm_y(\n                            n,\n                            m,\n                            self.phi_grid,\n                            self.theta_grid,\n                        ).imag\n                        self.test_results[-1] = 1j\n                        count += 1\n                    else:\n                        self.test_data += sph_harm_y(\n                            n,\n                            m,\n                            self.phi_grid,\n                            self.theta_grid,\n                        ).real\n                        self.test_results[-1] = 1\n                        count += 1", "min_run_count": 2, "name": "bench_spherical.Bench_spherical.time_recomposition", "number": 0, "param_names": [], "params": [], "repeat": 0, "rounds": 2, "sample_time": 0.01, "type": "time", "unit": "seconds", "version": "69bb9693dcf525fa477ba6c01eccc48e543864865c9ffe7c3446451be3164c7c", "warmup_time": -1}, "bench_spherical.Bench_spherical.time_scale_voronoi": {"code": "class Bench_spherical:\n    def time_scale_voronoi(self):\n        scale_voronoi(self.theta_grid, self.phi_grid)\n\n    def setup(self):\n        max_harm = 23\n        num_phi = 90\n        num_theta = 180\n    \n        theta = np.linspace(0, tau - tau / num_theta, num_theta)\n        phi = np.linspace(\n            pi / (2 * num_phi),\n            pi - pi / (2 * num_phi),\n            num_phi,\n        )\n        self.theta_grid, self.phi_grid = np.meshgrid(theta, phi)\n        self.test_scale = np.sin(self.phi_grid)\n    \n        count = 0\n        primes = [0, 2, 3, 5, 7, 11, 13, 17, 19, 23]\n        self.test_data = np.zeros(self.phi_grid.shape)\n        self.test_results = []\n        test_harmonics = []\n        for n in range(max_harm + 1):\n            for m in range(n + 1):\n                test_harmonics.append([n, m])\n                self.test_results.append(0)\n                if n in primes and m in primes:\n                    if m in primes[1::2]:\n                        self.test_data += sph_harm_y(\n                            n,\n                            m,\n                            self.phi_grid,\n                            self.theta_grid,\n                        ).imag\n                        self.test_results[-1] = 1j\n                        count += 1\n                    else:\n                        self.test_data += sph_harm_y(\n                            n,\n                            m,\n                            self.phi_grid,\n                            self.theta_grid,\n                        ).real\n                        self.test_results[-1] = 1\n                        count += 1", "min_run_count": 2, "name": "bench_spherical.Bench_spherical.time_scale_voronoi", "number": 0, "param_names": [], "params": [], "repeat": 0, "rounds": 2, "sample_time": 0.01, "type": "time", "unit": "seconds", "version": "6bdb5f9c9b004c678fa0722b430c3679705715c93e992717d1ca80c3391cc4f3", "warmup_time": -1}, "bench_stats.Bench_eofunc_eofs.peakmem_eofunc": {"code": "class Bench_eofunc_eofs:\n    def peakmem_eofunc(self):\n        eofunc_eofs(self.sample_data_eof, neofs=1, time_dim=2)\n\n    def setup(self):\n        self.sample_data_eof = np.arange(64, dtype='int64').reshape((4, 4, 4))", "name": "bench_stats.Bench_eofunc_eofs.peakmem_eofunc", "param_names": [], "params": [], "type": "peakmemory", "unit": "bytes", "version": "c4cf60f857f25a3607ef6fa517d682ef5886c6cb05f98936833ca713c87bc68f"}, "bench_stats.Bench_eofunc_eofs.time_eofunc": {"code": "class Bench_eofunc_eofs:\n    def time_eofunc(self):\n        eofunc_eofs(self.sample_data_eof, neofs=1, time_dim=2)\n\n    def setup(self):\n        self.sample_data_eof = np.arange(64, dtype='int64').reshape((4, 4, 4))", "min_run_count": 2, "name": "bench_stats.Bench_eofunc_eofs.time_eofunc", "number": 0, "param_names": [], "params": [], "repeat": 0, "rounds": 2, "sample_time": 0.01, "type": "time", "unit": "seconds", "version": "99eb5fd9b6f0b4217f31c4747e038a23a86d47e91499777ac83d753deb7a9cd6", "warmup_time": -1}, "bench_stats.Bench_eofunc_ps.peakmem_eofunc_ps": {"code": "class Bench_eofunc_ps:\n    def peakmem_eofunc_ps(self):\n        eofunc_pcs(self.sst, npcs=5, meta=True)\n\n    def setup(self):\n        try:\n            self.nc_ds = xr.open_dataset(dir + \"/test/eofunc_dataset.nc\")\n        except Exception:\n            self.nc_ds = xr.open_dataset(dir + \"/../test/eofunc_dataset.nc\")\n    \n        self.sst = self.nc_ds.sst", "name": "bench_stats.Bench_eofunc_ps.peakmem_eofunc_ps", "param_names": [], "params": [], "type": "peakmemory", "unit": "bytes", "version": "893920d7ab810dff85a84f6ec4b680dbee0b2553f50248fae77bdadb33d92a7f"}, "bench_stats.Bench_eofunc_ps.time_eofunc_ps": {"code": "class Bench_eofunc_ps:\n    def time_eofunc_ps(self):\n        eofunc_pcs(self.sst, npcs=5, meta=True)\n\n    def setup(self):\n        try:\n            self.nc_ds = xr.open_dataset(dir + \"/test/eofunc_dataset.nc\")\n        except Exception:\n            self.nc_ds = xr.open_dataset(dir + \"/../test/eofunc_dataset.nc\")\n    \n        self.sst = self.nc_ds.sst", "min_run_count": 2, "name": "bench_stats.Bench_eofunc_ps.time_eofunc_ps", "number": 0, "param_names": [], "params": [], "repeat": 0, "rounds": 2, "sample_time": 0.01, "type": "time", "unit": "seconds", "version": "feee5331de56ab58f4260ca70aa6e01157843c8ab484414da282ff5c94a802fd", "warmup_time": -1}, "bench_stats.Bench_pearson_r.time_pearson_r": {"code": "class Bench_pearson_r:\n    def time_pearson_r(self):\n        pearson_r(self.a, self.b, weights=self.weights)\n\n    def setup(self):\n        times = xr.date_range(\n            start='2022-08-01', end='2022-08-05', freq='D', use_cftime=True\n        )\n        lats = np.linspace(start=-45, stop=45, num=3, dtype='float32')\n        lons = np.linspace(start=-180, stop=180, num=4, dtype='float32')\n    \n        x, y, z = np.meshgrid(lons, lats, times)\n        np.random.seed(0)\n    \n        self.a = np.random.random_sample((len(lats), len(lons), len(times)))\n        self.b = np.power(self.a, 2)\n        self.weights = np.cos(np.deg2rad(y))", "min_run_count": 2, "name": "bench_stats.Bench_pearson_r.time_pearson_r", "number": 0, "param_names": [], "params": [], "repeat": 0, "rounds": 2, "sample_time": 0.01, "type": "time", "unit": "seconds", "version": "6cd62ea3aa331a25fe69d2fb2b6b911c095cbea3100a6c7d9e6d36f9b8199449", "warmup_time": -1}, "import.Import.timeraw_import_geocat_comp": {"code": "class Import:\n    def timeraw_import_geocat_comp(self):\n        return \"import geocat.comp\"", "min_run_count": 2, "name": "import.Import.timeraw_import_geocat_comp", "number": 1, "param_names": [], "params": [], "repeat": 0, "rounds": 2, "sample_time": 0.01, "type": "time", "unit": "seconds", "version": "a31d189939828b73cd67532df40f01aebfe362b9fd831be60d8eef67ee309055", "warmup_time": -1}}, "machines": {"GH-Actions": {"arch": "x64", "cpu": "2-core unknown", "machine": "GH-Actions", "os": "ubuntu-latest", "ram": "7GB", "version": 1}}, "tags": {"v2021.03.0": 810, "v2021.04.0": 941, "v2021.05.0": 1060, "v2021.05.1": 1065, "v2021.06.0": 1097, "v2021.07.0": 1167, "v2021.07.1": 1192, "v2021.08.0": 1204, "v2021.08.1": 1235, "v2021.09.0": 1280, "v2021.10.0": 1320, "v2022.03.0": 1439, "v2022.04.0": 1476, "v2022.07.0": 1549, "v2022.08.0": 1604, "v2022.10.0": 1829, "v2022.10.1": 1832, "v2022.11.0": 1897, "v2023.02.0": 1926, "v2023.03.0": 2219, "v2023.03.1": 2292, "v2023.03.2": 2358, "v2023.05.0": 2388, "v2023.06.0": 2462, "v2023.06.1": 2464, "v2023.09.0": 2538, "v2023.10.0": 2595, "v2023.10.1": 2639, "v2023.12.0": 2724, "v2024.01.0": 2835, "v2024.02.0": 2906, "v2024.03.0": 2951, "v2024.04.0": 3007, "v2025.01.0": 3161, "v2025.02.0": 3179, "v2025.03.0": 3221, "v2025.05.0": 3289, "v2025.07.0": 3331, "v2025.09.0": 3376, "v2025.10.01": 3410, "v2021.02.0": 598}, "pages": [["", "Grid view", "Display as a agrid"], ["summarylist", "List view", "Display as a list"], ["regressions", "Show regressions", "Display information about recent regressions"]]}